import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from database import (
    init_database, save_form_data, get_user_forms_count_sync,
    update_user_stats_sync, get_database_stats_sync, get_all_forms_sync,
    get_user_forms_sync, get_next_pending_form_sync, get_accepted_forms_sync,
    get_form_by_id_sync, update_form_status_sync, get_pending_forms_count_sync,
    get_username_by_user_id_sync, get_user_telegram_info_sync,
    get_all_user_ids_sync, get_user_email_count_sync, update_payment_status_sync,
    save_payment_card_sync, save_payment_receipt_sync, get_user_available_emails_limit,
    load_emails, save_emails, load_banks, save_banks)
from config import BOT_TOKEN, ADMIN_IDS, CHAT_ID

# Support multiple admins
ADMIN_ID = ADMIN_IDS[0] if ADMIN_IDS else 6995773690  # Backward compatibility

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Constants
# MAX_EMAILS_LIMIT is now dynamic based on formula: 3 + (forms_count * 3)
user_email_state = {}
user_states = {}  # For payment states
users_ids = set()

# Initialize PostgreSQL database
# Database initialization will be done async in main()


class FormStates(StatesGroup):
    waiting_for_bank = State()
    waiting_for_fullname = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    waiting_for_password = State()
    waiting_for_card_number = State()
    waiting_for_card_expiry = State()
    waiting_for_card_cvv = State()
    waiting_for_card_pin = State()
    waiting_for_passport_photo1 = State()
    waiting_for_passport_photo2 = State()
    waiting_for_enforcement_photo = State()
    waiting_for_bank_name_photo = State()
    waiting_for_bank_phone_photo = State()
    waiting_for_bank_email_photo = State()
    waiting_for_bank_income_photo = State()
    waiting_for_bank_p2p_photo = State()
    waiting_for_deletion_photo = State()


class AdminStates(StatesGroup):
    waiting_for_emails = State()
    waiting_for_broadcast = State()
    waiting_for_rejection_reason = State()
    waiting_for_banks_update = State()
    waiting_for_payment_receipt = State()


class PaymentStates(StatesGroup):
    waiting_for_payment_card = State()
    waiting_for_substatus = State()
    processing_form = State()
    waiting_for_banks_update = State()


# PostgreSQL database functions are imported from database.py module


def is_admin(user_id):
    """Check if user is admin"""
    return user_id in ADMIN_IDS


def main_menu_kb():
    """Main menu keyboard"""
    kb = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="üìÑ –ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–∫–µ—Ç–∏"),
            KeyboardButton(text="üìò –ì–∞–π–¥–∏ / FAQ")
        ],
                  [
                      KeyboardButton(text="‚úçÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"),
                      KeyboardButton(text="üìã –ú–æ—ó –∞–Ω–∫–µ—Ç–∏")
                  ],
                  [
                      KeyboardButton(text="üè¶ –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤"),
                      KeyboardButton(text="üìß –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—à—Ç—É")
                  ], [KeyboardButton(text="üìã –£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")]],
        resize_keyboard=True)

    # Show admin panel for any authorized admin
    if ADMIN_IDS:
        kb.keyboard.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")])

    return kb


def banks_kb():
    """Banks selection keyboard"""
    banks_data = load_banks()
    keyboard = []
    banks_list = list(banks_data.keys())

    for i in range(0, len(banks_list), 2):
        row = [
            KeyboardButton(
                text=f"{banks_list[i]} - {banks_data[banks_list[i]]}‚Ç¥")
        ]
        if i + 1 < len(banks_list):
            row.append(
                KeyboardButton(
                    text=
                    f"{banks_list[i + 1]} - {banks_data[banks_list[i + 1]]}‚Ç¥"))
        keyboard.append(row)

    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(keyboard=keyboard,
                               resize_keyboard=True,
                               one_time_keyboard=True)


def admin_kb():
    """Admin panel keyboard"""
    pending_count = get_pending_forms_count_sync()
    return ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(text="üìß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—à—Ç–æ—é"),
            KeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
        ],
        [KeyboardButton(text=f"üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤—ñ –∞–Ω–∫–µ—Ç–∏ ({pending_count})")],
        [
            KeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∏–π–Ω—è—Ç—ñ –∞–Ω–∫–µ—Ç–∏"),
            KeyboardButton(text="üìã –í—Å—ñ –∞–Ω–∫–µ—Ç–∏")
        ],
        [
            KeyboardButton(text="üè¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏"),
            KeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        ]
    ],
                               resize_keyboard=True)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Start command handler"""
    if message.from_user and message.from_user.id:
        users_ids.add(message.from_user.id)
        username = message.from_user.username if message.from_user.username else None
        update_user_stats_sync(message.from_user.id, username=username)

    # Check if user is admin
    if message.from_user and message.from_user.id == ADMIN_ID:
        welcome_text = """üëã –í—ñ—Ç–∞—é, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!

üîß **–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞:**
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∞–º–∏
‚Ä¢ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—à—Ç–æ—é

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"""
        await message.answer(welcome_text, reply_markup=admin_kb())
    else:
        welcome_text = """üëã –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∫–∞—Ä—Ç–∫–∏!

üéØ –©–æ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ –∞–Ω–∫–µ—Ç–∏
‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –≥–∞–π–¥–∏ —Ç–∞ FAQ
‚Ä¢ –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –±–∞–Ω–∫—ñ–≤
‚Ä¢ –û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —É–º–æ–≤–∞–º–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ
‚Ä¢ –û—Ç—Ä–∏–º–∞—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"""
        await message.answer(welcome_text, reply_markup=main_menu_kb())


@dp.message(F.text == "üìÑ –ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–∫–µ—Ç–∏")
async def show_form_example(message: types.Message):
    """Show form example with images"""
    example_text = """üìÑ –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏:

üè¶ –ë–∞–Ω–∫: –ú–æ–Ω–æ–±–∞–Ω–∫
üë§ –ü–Ü–ë: –ü–µ—Ç—Ä–µ–Ω–∫–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –Ü–≤–∞–Ω–æ–≤–∏—á  
üìß Email: alex.petrenko@example.com
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380944476145
üîê –ü–∞—Ä–æ–ª—å: 1234

üí≥ –î–∞–Ω—ñ –∫–∞—Ä—Ç–∫–∏:
‚Ä¢ –ù–æ–º–µ—Ä: 1234 5678 9012 3456
‚Ä¢ –°—Ç—Ä–æ–∫ –¥—ñ—ó: 12/25
‚Ä¢ CVV: 123  
‚Ä¢ PIN: 1234

üì≤ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ –∑ –î—ñ—ó:
1. –î–æ–∫—É–º–µ–Ω—Ç–∏:
   * 2 —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏, –¥–µ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ:
     * –§–æ—Ç–æ –æ–±–ª–∏—á—á—è
     * –ü–æ–≤–Ω–µ —ñ–º‚Äô—è (–ü–Ü–ë)
     * –Ü–ü–ù (—ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø–æ–¥–∞—Ç–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä)
     * –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–ø–∏—Å–∫–∏

2. –®—Ç—Ä–∞—Ñ–∏/–≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è:
   * –°–∫—Ä—ñ–Ω, –¥–µ:
     * –í—ñ–¥—Å—É—Ç–Ω—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —à—Ç—Ä–∞—Ñ–∏
     * –í–∫–∞–∑–∞–Ω–æ "–≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç—ñ" –∞–±–æ —â–æ –≤–æ–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ

üè¶ –°–∫—Ä—ñ–Ω—à–æ—Ç–∏ –∑ –±–∞–Ω–∫—É (–∫–∞–±—ñ–Ω–µ—Ç —á–∏ –¥–æ–¥–∞—Ç–æ–∫):
1. –ü–Ü–ë –¥—Ä–æ–ø–∞:
   * –°–∫—Ä—ñ–Ω, –¥–µ –≤–∏–¥–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–µ –ø–æ–≤–Ω–µ —ñ–º‚Äô—è
2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:
   * –°–∫—Ä—ñ–Ω —ñ–∑ –≤–∫–ª–∞–¥–∫–∏, –¥–µ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä, –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–π –¥–æ –∞–∫–∞—É–Ω—Ç–∞
3. –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞:
   * –°–∫—Ä—ñ–Ω –∑ —Ä–æ–∑–¥—ñ–ª—É, –¥–µ –≤–∏–¥–Ω–æ e-mail
4. –ú—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥:
   * –°–∫—Ä—ñ–Ω –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é, —è–∫–∏–π –¥–æ—Ö—ñ–¥ –∑–∞–∑–Ω–∞—á–µ–Ω–æ (–ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–±–æ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ)
5. P2P-–ª—ñ–º—ñ—Ç–∏:
   * –°–∫—Ä—ñ–Ω –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å/–ª—ñ–º—ñ—Ç—ñ–≤ –∫–∞—Ä—Ç–∫–∏:
     * –õ—ñ–º—ñ—Ç –Ω–∞ –ø–µ—Ä–µ–∫–∞–∑–∏ –∑ –∫–∞—Ä—Ç–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É (—ñ–Ω—à–∏–º –æ—Å–æ–±–∞–º)

üìπ –î–æ–¥–∞—Ç–∫–æ–≤–æ:
* –°–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ –≤—ñ–¥–µ–æ:
  * –Ø–∫ –≤–∏—Ö–æ–¥–∏—à –∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
  * –Ø–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–æ–∫

‚úÖ –í–∞–∂–ª–∏–≤–æ:
‚Ä¢ –í—Å—ñ –¥–∞–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–º–∏
‚Ä¢ –§–æ—Ç–æ –º–∞—é—Ç—å –±—É—Ç–∏ —á—ñ—Ç–∫–∏–º–∏ —Ç–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–º–∏
‚Ä¢ –ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 4 —Å–∏–º–≤–æ–ª–∏

üìù –ü—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∞ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è 24 –≥–æ–¥–∏–Ω–∏"""

    # Send text first
    await message.answer(example_text, reply_markup=main_menu_kb())

    # Send example images as media group (all 5 real screenshots)

    try:
        media = []
        
        # Add enforcement check screenshot
        with open("attached_assets/image_1753095314727.png", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="enforcement_example.png"),
                caption="üìã –ü—Ä–∏–∫–ª–∞–¥–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –¥–ª—è –∞–Ω–∫–µ—Ç–∏"
            ))
        
        # Add passport/document screenshot
        with open("attached_assets/image_1753095319239.png", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="passport_example.png")
            ))
            
        # Add app store screenshot
        with open("attached_assets/image_1753095323168.png", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="app_store_example.png")
            ))
            
        # Add bank app menu screenshot
        with open("attached_assets/image_1753095326520.png", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="bank_menu_example.png")
            ))
            
        # Add ID document screenshot
        with open("attached_assets/image_1753095329693.png", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="id_document_example.png")
            ))
        
        await bot.send_media_group(chat_id=message.chat.id, media=media)
        
    except Exception as e:
        logger.error(f"Error sending example images: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ñ–æ—Ç–æ")
        
    try:
        media = []
        
        # Add enforcement check screenshot
        with open("attached_assets/1.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="1.png"),
                caption="""#TAS2U 18+
–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ
–ù–æ–º–µ—Ä - 945000000
–ü–æ—à—Ç–∞ - 00000000000@tronikmail.com
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ - 0000 0000 0000 0000
–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó - 00/00
 –°VV –∫–æ–¥ - 000
–ü—ñ–Ω –∫–æ–¥ - 0000
–ü–∞—Ä–æ–ª—å –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –º–∞—î –±—É—Ç–∏: Qwerty123@"""
            ))
            
        # Add app store screenshot
        with open("attached_assets/2.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="tas2.png")
            ))
            
        # Add bank app menu screenshot
        with open("attached_assets/3.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="tas3.png")
            ))
            
        # Add ID document screenshot
        with open("attached_assets/4.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="tas4.png")
            ))
            
        with open("attached_assets/5.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="tas5.png")
            ))

        with open("attached_assets/6.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="tas6.png")
            ))

        with open("attached_assets/7.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="tas7.png")
            ))

        with open("attached_assets/8.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="tas8.png")
            ))
        
        await bot.send_media_group(chat_id=message.chat.id, media=media)
        
    except Exception as e:
        logger.error(f"Error sending example images: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ñ–æ—Ç–æ")

    try:
        media = []
        with open("attached_assets/ukrsib/1.jpg", "rb") as photo:
                media.append(types.InputMediaPhoto(
                    media=types.BufferedInputFile(photo.read(), filename="sib1.png"),
                    caption="""#Ukrsib
–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ
–ù–æ–º–µ—Ä - 945000000
–ü–æ—à—Ç–∞ - 00000000000@tronikmail.com
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ - 0000 0000 0000 0000
–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó - 00/00
–°VV –∫–æ–¥ - 000
–ü—ñ–Ω –∫–æ–¥ - 0000
–ü–∞—Ä–æ–ª—å –≤—Ö—ñ–¥ —É –¥–æ–¥–∞—Ç–æ–∫ -000000
–¢—Ä–µ–±–∞ —â–æ–± –±—É–ª–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∞ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω–Ω—ñ"""
                ))
        
        # Add passport/document screenshot
        with open("attached_assets/ukrsib/2.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="sib2.png")
            ))
            
        # Add app store screenshot
        with open("attached_assets/ukrsib/3.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="sib3.png")
            ))
            
        # Add bank app menu screenshot
        with open("attached_assets/ukrsib/4.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="sib4.png")
            ))
            
        # Add ID document screenshot
        with open("attached_assets/ukrsib/5.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="sib5.png")
            ))
            
        with open("attached_assets/ukrsib/6.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="sib6.png")
            ))
            
        await bot.send_media_group(chat_id=message.chat.id, media=media)
        
    except Exception as e:
        logger.error(f"Error sending example images: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ñ–æ—Ç–æ")

    try:
        media = []
        with open("attached_assets/abank/1.jpg", "rb") as photo:
                media.append(types.InputMediaPhoto(
                    media=types.BufferedInputFile(photo.read(), filename="abank1.png"),
                    caption="""#Abank 18+
–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ
–ù–æ–º–µ—Ä - 945000000
–ü–æ—à—Ç–∞ - 00000000000@tronikmail.com
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ - 0000 0000 0000 0000
–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó - 00/00
–°VV –∫–æ–¥ - 000
–ü—ñ–Ω –∫–æ–¥ - 0000
–ü–∞—Ä–æ–ª—å –≤—Ö—ñ–¥ —É –¥–æ–¥–∞—Ç–æ–∫ - 0000"""
                ))
        
        # Add passport/document screenshot
        with open("attached_assets/abank/2.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="abank2.png")
            ))
            
        # Add app store screenshot
        with open("attached_assets/abank/3.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="abank3.png")
            ))
            
        # Add bank app menu screenshot
        with open("attached_assets/abank/4.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="abank4.png")
            ))
            
        # Add ID document screenshot
        with open("attached_assets/abank/5.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="abank5.png")
            ))
            
        with open("attached_assets/abank/6.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="abank6.png")
            ))

        with open("attached_assets/abank/7.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="abank7.png")
            ))
            
        await bot.send_media_group(chat_id=message.chat.id, media=media)
        
    except Exception as e:
        logger.error(f"Error sending example images: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ñ–æ—Ç–æ")

    try:
        media = []
        with open("attached_assets/raif/1.jpg", "rb") as photo:
                media.append(types.InputMediaPhoto(
                    media=types.BufferedInputFile(photo.read(), filename="raif1.png"),
                    caption="""#Raif 18+
–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ
–ù–æ–º–µ—Ä - 945000000
–ü–æ—à—Ç–∞ - 00000000000@tronikmail.com
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ - 0000 0000 0000 0000
–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó - 00/00
–°VV –∫–æ–¥ - 000
–ü—ñ–Ω –∫–æ–¥ - 0000
–ü–∞—Ä–æ–ª—å –≤—Ö—ñ–¥ —É –¥–æ–¥–∞—Ç–æ–∫ - 0000
–û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–π—Ç–∏ –∑ –¥–æ–¥–∞—Ç–∫—É –±–∞–Ω–∫—É –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏!!!"""
                ))
        
        # Add passport/document screenshot
        with open("attached_assets/raif/2.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="raif2.png")
            ))
            
        # Add app store screenshot
        with open("attached_assets/raif/3.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="raif3.png")
            ))
            
        # Add bank app menu screenshot
        with open("attached_assets/raif/4.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="raif4.png")
            ))
            
        # Add ID document screenshot
        with open("attached_assets/raif/5.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="raif5.png")
            ))
            
        with open("attached_assets/raif/6.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="raif6.png")
            ))
            
        await bot.send_media_group(chat_id=message.chat.id, media=media)
        
    except Exception as e:
        logger.error(f"Error sending example images: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ñ–æ—Ç–æ")

    try:
        media = []
        with open("attached_assets/pumb/1.jpg", "rb") as photo:
                media.append(types.InputMediaPhoto(
                    media=types.BufferedInputFile(photo.read(), filename="pumb1.png"),
                    caption="""#Pumb –ü–µ—Ä–µ–≤'—è–∑/–†–µ–≥

–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ
–ù–æ–º–µ—Ä - 945000000
–ü–æ—à—Ç–∞ - 00000000000@tronikmail.com
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ - 0000 0000 0000 0000
–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó - 00/00
 –°VV –∫–æ–¥ - 000
–ü—ñ–Ω –∫–æ–¥ - 0000
–ü–∞—Ä–æ–ª—å - 00000

–ü—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –±–∞–Ω–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–ø–∏—Å—É–≤–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —è–∫–∏–π –Ω–∞–¥—ñ–π–¥–µ —É —Å–º—Å!
–Ø–∫—â–æ –ø–µ—Ä–µ–≤—è'–∑ —á–µ—Ä–µ–∑ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Ä–∞–∑—É !
–ü—Ä–∏ –ø–µ—Ä–µ–≤—è'–∑—ñ –æ–Ω–ª–∞–π–Ω –≤–∫–∞–∑—É–≤–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø–µ—Ä–µ–≤—è–∑—É —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞  –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏!"""
                ))
        
        # Add passport/document screenshot
        with open("attached_assets/pumb/2.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="pumb2.png")
            ))
            
        # Add app store screenshot
        with open("attached_assets/pumb/3.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="pumb3.png")
            ))
            
        # Add bank app menu screenshot
        with open("attached_assets/pumb/4.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="pumb4.png")
            ))
            
        # Add ID document screenshot
        with open("attached_assets/pumb/5.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="pumb5.png")
            ))
            
        with open("attached_assets/pumb/6.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="pumb6.png")
            ))

        with open("attached_assets/pumb/7.jpg", "rb") as photo:
            media.append(types.InputMediaPhoto(
                media=types.BufferedInputFile(photo.read(), filename="pumb7.png")
            ))
            
        await bot.send_media_group(chat_id=message.chat.id, media=media)
        
    except Exception as e:
        logger.error(f"Error sending example images: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ñ–æ—Ç–æ")

@dp.message(F.text == "üìò –ì–∞–π–¥–∏ / FAQ")
async def show_guides(message: types.Message):
    """Show guides and FAQ"""
    guides_text = """üìò **–ì–∞–π–¥–∏ —Ç–∞ —á–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:**

‚ùì **–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:**

**1. –°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –∑–∞–π–º–∞—î —Ä–æ–∑–≥–ª—è–¥ –∑–∞—è–≤–∫–∏?**
–ó–∞–∑–≤–∏—á–∞–π 1-3 —Ä–æ–±–æ—á—ñ –¥–Ω—ñ –ø—ñ—Å–ª—è –ø–æ–¥–∞—á—ñ –≤—Å—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.

**2. –Ø–∫—ñ –±–∞–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ?**
–ü–£–ú–ë, –ú–æ–Ω–æ–±–∞–Ω–∫, –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫, RAIF, IZIBank, –£–∫—Ä–°–∏–± 2.0

**3. –ß–∏ –±–µ–∑–ø–µ—á–Ω–æ –Ω–∞–¥–∞–≤–∞—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ?**
–¢–∞–∫, –≤—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –ª–∏—à–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏.

**4. –©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –∫–∞—Ä—Ç–∫—É –Ω–µ —Å—Ö–≤–∞–ª–∏–ª–∏?**
–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑'—è—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω –≤—ñ–¥–º–æ–≤–∏.

**5. –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –ø–æ—Å–ª—É–≥–∞?**
–ü–æ—Å–ª—É–≥–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞, –æ–ø–ª–∞—á—É—é—Ç—å—Å—è –ª–∏—à–µ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∫–æ–º—ñ—Å—ñ—ó –∑–≥—ñ–¥–Ω–æ —Ç–∞—Ä–∏—Ñ—ñ–≤ –±–∞–Ω–∫—É.

üìû **–ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:**
–£ —Ä–∞–∑—ñ –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç—É."""

    await message.answer(guides_text,
                         parse_mode="Markdown",
                         reply_markup=main_menu_kb())


@dp.message(F.text == "üè¶ –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤")
async def show_banks_list(message: types.Message):
    """Show available banks with current prices"""
    banks_data = load_banks()

    banks_text = "üè¶ –î–æ—Å—Ç—É–ø–Ω—ñ –±–∞–Ω–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫:\n\n"

    # Display current banks with prices
    for bank_name, price in banks_data.items():
        banks_text += f"‚Ä¢ {bank_name} - {price}‚Ç¥\n"

    banks_text += "\nüí∞ –¶—ñ–Ω–∞ –≤–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ—Å–ª—É–≥—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏\n"
    banks_text += "‚úÖ –ì–∞—Ä–∞–Ω—Ç—ñ—è —è–∫–æ—Å—Ç—ñ —Ç–∞ –±–µ–∑–ø–µ–∫–∏\n"
    banks_text += "üöÄ –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–æ–∫\n\n"
    banks_text += "–î–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ –æ–±–µ—Ä—ñ—Ç—å \"‚úçÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É\" –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é."

    await message.answer(banks_text, reply_markup=main_menu_kb())


@dp.message(F.text == "üìã –£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ")
async def show_cooperation_terms(message: types.Message):
    """Show cooperation terms"""
    terms_text = """üìã **–£–º–æ–≤–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ:**

‚úÖ **–©–æ –º–∏ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ:**
‚Ä¢ –ö–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—É –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–æ–∫
‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–∞ –≤—Å—ñ—Ö –µ—Ç–∞–ø–∞—Ö
‚Ä¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é

üìù **–£–º–æ–≤–∏ –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏:**
‚Ä¢ –í—ñ–∫ –≤—ñ–¥ 18 —Ä–æ–∫—ñ–≤
‚Ä¢ –ì—Ä–æ–º–∞–¥—è–Ω—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏
‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ—Ä–≥—ñ–≤ –≤ –±–∞–Ω–∫–∞—Ö
‚Ä¢ –ù–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤

üí∞ **–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ —É–º–æ–≤–∏:**
‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ - –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ
‚Ä¢ –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –∫–æ–º—ñ—Å—ñ—ó –∑–≥—ñ–¥–Ω–æ —Ç–∞—Ä–∏—Ñ—ñ–≤ –±–∞–Ω–∫—É
‚Ä¢ –ë–µ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤

‚öñÔ∏è **–ü—Ä–∞–≤–æ–≤—ñ –∞—Å–ø–µ–∫—Ç–∏:**
‚Ä¢ –î–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –£–∫—Ä–∞—ó–Ω–∏
‚Ä¢ –ó–∞—Ö–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ –ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π

üîê **–ë–µ–∑–ø–µ–∫–∞:**
‚Ä¢ –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
‚Ä¢ –ó–∞—Ö–∏—â–µ–Ω—ñ –∫–∞–Ω–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—á—ñ
‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–∫–∏

–ü–æ–¥–∞—é—á–∏ –∑–∞—è–≤–∫—É, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ —Ü–∏–º–∏ —É–º–æ–≤–∞–º–∏."""

    await message.answer(terms_text,
                         parse_mode="Markdown",
                         reply_markup=main_menu_kb())


@dp.message(F.text == "üìß –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—à—Ç—É")
async def get_email(message: types.Message):
    """Handle email request"""
    if not message.from_user or not message.from_user.id:
        return
    user_id = message.from_user.id

    # Get fresh data from database each time
    forms_count = get_user_forms_count_sync(user_id)
    current_email_count = get_user_email_count_sync(user_id)
    # New formula: 3 base emails + (forms_count * 3)
    max_emails_for_user = get_user_available_emails_limit(user_id)

    # Check email limit with fresh database data
    if current_email_count >= max_emails_for_user:
        await message.answer(
            f"‚ùå –í–∏ –¥–æ—Å—è–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∫—Ä–∏–Ω—å–æ–∫.\n"
            f"üìß –î–æ—Å—Ç—É–ø–Ω–æ: {max_emails_for_user} (–±–∞–∑–æ–≤–∏—Ö: 3 + –∞–Ω–∫–µ—Ç: {forms_count} √ó 3)\n"
            f"üì´ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {current_email_count}",
            reply_markup=main_menu_kb())
        return

    # Load emails
    emails_data = load_emails()
    if not emails_data["available"]:
        await message.answer(
            "‚ùå –ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∫—Ä–∏–Ω—å–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=main_menu_kb())
        return

    # Give email to user
    email = emails_data["available"].pop(0)
    emails_data["used"].append(email)
    save_emails(emails_data)

    # Update database
    update_user_stats_sync(user_id, emails_received=1)

    # Get fresh data from database after update
    updated_forms_count = get_user_forms_count_sync(user_id)
    updated_email_count = get_user_email_count_sync(user_id)
    updated_max_emails = get_user_available_emails_limit(user_id)

    await message.answer(
        f"‚úÖ –í–∞—à–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: `{email}`\n\n"
        f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {updated_email_count}/{updated_max_emails}\n"
        f"üìß –õ—ñ–º—ñ—Ç: 3 –±–∞–∑–æ–≤–∏—Ö + {updated_forms_count} –∞–Ω–∫–µ—Ç √ó 3",
        parse_mode="Markdown",
        reply_markup=main_menu_kb())


@dp.message(F.text == "üìã –ú–æ—ó –∞–Ω–∫–µ—Ç–∏")
async def show_user_forms(message: types.Message):
    """Show user's forms with status"""
    if not message.from_user or not message.from_user.id:
        return

    user_id = message.from_user.id
    forms = get_user_forms_sync(user_id)

    if not forms:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ–¥–∞–Ω–∏—Ö –∞–Ω–∫–µ—Ç",
                             reply_markup=main_menu_kb())
        return

    forms_text = "üìã **–í–∞—à—ñ –∞–Ω–∫–µ—Ç–∏:**\n\n"

    for i, form in enumerate(forms, 1):
        status_emoji = {
            '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ': 'üì§',
            '–û—Ç—Ä–∏–º–∞–Ω–æ': 'üëÄ',
            '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ': '‚ùå',
            '–ü—Ä–∏–π–Ω—è—Ç–æ': '‚úÖ',
            '–û–ø–ª–∞—á–µ–Ω–æ': 'üí∞'
        }.get(form['status'], '‚ùì')

        forms_text += f"{status_emoji} **{i}. {form['bank']}**\n"
        forms_text += f"üë§ {form['fullname']}\n"
        forms_text += f"üìÖ {form['timestamp'].strftime('%d.%m.%Y %H:%M')}\n"
        forms_text += f"üìä –°—Ç–∞—Ç—É—Å: {form['status']}\n"

        if form['substatus']:
            forms_text += f"üìù –ü—ñ–¥—Å—Ç–∞—Ç—É—Å: {form['substatus']}\n"

        if form['rejection_reason']:
            forms_text += f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {form['rejection_reason']}\n"

        forms_text += "\n"

    if len(forms_text) > 4000:
        forms_text = forms_text[:4000] + "..."

    await message.answer(forms_text,
                         parse_mode="Markdown",
                         reply_markup=main_menu_kb())


@dp.message(F.text == "‚úçÔ∏è –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É")
async def start_form(message: types.Message, state: FSMContext):
    """Start form filling process"""
    await state.set_state(FormStates.waiting_for_bank)
    await message.answer("üè¶ –û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏:",
                         reply_markup=banks_kb())


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
async def back_to_menu(message: types.Message, state: FSMContext):
    """Return to main menu"""
    await state.clear()
    await message.answer("üè† –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                         reply_markup=main_menu_kb())


@dp.message(FormStates.waiting_for_bank)
async def process_bank(message: types.Message, state: FSMContext):
    """Process bank selection"""
    if message.text == "üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üè† –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                             reply_markup=main_menu_kb())
        return

    banks_data = load_banks()
    # Extract bank name from button text (format: "BankName - 150‚Ç¥")
    selected_bank = None
    if " - " in message.text and message.text.endswith("‚Ç¥"):
        bank_name = message.text.split(" - ")[0]
        if bank_name in banks_data:
            selected_bank = bank_name

    if not selected_bank:
        await message.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å –±–∞–Ω–∫ –∑—ñ —Å–ø–∏—Å–∫—É:",
                             reply_markup=banks_kb())
        return

    await state.update_data(bank=selected_bank)
    await state.set_state(FormStates.waiting_for_fullname)
    await message.answer("üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü–Ü–ë):",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message(FormStates.waiting_for_fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    """Process fullname input"""
    if not message.text or len(message.text.strip()) < 3:
        await message.answer(
            "‚ùå –ü–Ü–ë –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(fullname=message.text.strip())
    await state.set_state(FormStates.waiting_for_email)
    await message.answer("‚úâÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à email:")


@dp.message(FormStates.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    """Process email input"""
    if not message.text:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    email = message.text.strip()
    if "@" not in email or "." not in email:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É email –∞–¥—Ä–µ—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(email=email)
    await state.set_state(FormStates.waiting_for_phone)
    await message.answer(
        "üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0944476145):")


@dp.message(FormStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """Process phone input"""
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    phone = message.text.strip()
    if len(phone) < 7:
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(phone=phone)
    await state.set_state(FormStates.waiting_for_password)
    await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (–º—ñ–Ω—ñ–º—É–º 4 —Å–∏–º–≤–æ–ª–∏):")


@dp.message(FormStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    """Process password input"""
    if not message.text:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (–º—ñ–Ω—ñ–º—É–º 4 —Å–∏–º–≤–æ–ª–∏). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    password = message.text.strip()
    if len(password) < 4:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 4 —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(password=password)
    await state.set_state(FormStates.waiting_for_card_number)
    await message.answer("üí≥ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (16 —Ü–∏—Ñ—Ä):")


@dp.message(FormStates.waiting_for_card_number)
async def process_card_number(message: types.Message, state: FSMContext):
    """Process card number input"""
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    card_number = message.text.strip().replace(" ", "")
    if len(card_number) != 16 or not card_number.isdigit():
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 16 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(card_number=card_number)
    await state.set_state(FormStates.waiting_for_card_expiry)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–æ–∫ –¥—ñ—ó –∫–∞—Ä—Ç–∫–∏ (MM/YY, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12/25):")


@dp.message(FormStates.waiting_for_card_expiry)
async def process_card_expiry(message: types.Message, state: FSMContext):
    """Process card expiry input"""
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–æ–∫ –¥—ñ—ó –∫–∞—Ä—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    expiry = message.text.strip()
    if len(expiry) != 5 or expiry[2] != "/" or not expiry[:2].isdigit() or not expiry[3:].isdigit():
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ MM/YY (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12/25). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(card_expiry=expiry)
    await state.set_state(FormStates.waiting_for_card_cvv)
    await message.answer("üîê –í–≤–µ–¥—ñ—Ç—å CVV –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏ (3 —Ü–∏—Ñ—Ä–∏):")


@dp.message(FormStates.waiting_for_card_cvv)
async def process_card_cvv(message: types.Message, state: FSMContext):
    """Process card CVV input"""
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å CVV –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    cvv = message.text.strip()
    if len(cvv) != 3 or not cvv.isdigit():
        await message.answer("‚ùå CVV –∫–æ–¥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 3 —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(card_cvv=cvv)
    await state.set_state(FormStates.waiting_for_card_pin)
    await message.answer("üî¢ –í–≤–µ–¥—ñ—Ç—å PIN –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏ (4 —Ü–∏—Ñ—Ä–∏):")


@dp.message(FormStates.waiting_for_card_pin)
async def process_card_pin(message: types.Message, state: FSMContext):
    """Process card PIN input"""
    if not message.text:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å PIN –∫–æ–¥ –∫–∞—Ä—Ç–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    pin = message.text.strip()
    if len(pin) != 4 or not pin.isdigit():
        await message.answer("‚ùå PIN –∫–æ–¥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 4 —Ü–∏—Ñ—Ä–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await state.update_data(card_pin=pin)
    await state.set_state(FormStates.waiting_for_passport_photo1)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å 1-–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –î—ñ—ó, –¥–µ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ —Ñ–æ—Ç–æ –æ–±–ª–∏—á—á—è, –ø–æ–≤–Ω–µ —ñ–º'—è (–ü–Ü–ë), –Ü–ü–ù —Ç–∞ –∞–¥—Ä–µ—Å—É –ø—Ä–æ–ø–∏—Å–∫–∏:")


@dp.message(FormStates.waiting_for_passport_photo1, F.photo)
async def process_passport_photo1(message: types.Message, state: FSMContext):
    """Process first passport photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å 1-–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –î—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(passport_photo1=photo)
    await state.set_state(FormStates.waiting_for_passport_photo2)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å 2-–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –î—ñ—ó (–º–æ–∂–Ω–∞ —Ç–æ–π —Å–∞–º–∏–π –∞–±–æ —ñ–Ω—à–∏–π –∑ —Ç—ñ—î—é –∂ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é):")


@dp.message(FormStates.waiting_for_passport_photo1)
async def process_passport_photo1_invalid(message: types.Message, state: FSMContext):
    """Handle invalid first passport photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å 1-–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –î—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_passport_photo2, F.photo)
async def process_passport_photo2(message: types.Message, state: FSMContext):
    """Process second passport photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å 2-–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –î—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(passport_photo2=photo)
    await state.set_state(FormStates.waiting_for_enforcement_photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –î—ñ—ó, –¥–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —à—Ç—Ä–∞—Ñ–∏ —ñ –≤–∫–∞–∑–∞–Ω–æ —â–æ –ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç—ñ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ:")


@dp.message(FormStates.waiting_for_passport_photo2)
async def process_passport_photo2_invalid(message: types.Message, state: FSMContext):
    """Handle invalid second passport photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å 2-–π —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –î—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_enforcement_photo, F.photo)
async def process_enforcement_photo(message: types.Message, state: FSMContext):
    """Process enforcement photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—Ä–æ–≤–∞–¥–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(enforcement_photo=photo)
    await state.set_state(FormStates.waiting_for_bank_name_photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –±–∞–Ω–∫—É, –¥–µ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ –ü–Ü–ë –¥—Ä–æ–ø–∞:")


@dp.message(FormStates.waiting_for_enforcement_photo)
async def process_enforcement_photo_invalid(message: types.Message, state: FSMContext):
    """Handle invalid enforcement photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—Ä–æ–≤–∞–¥–∂–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_bank_name_photo, F.photo)
async def process_bank_name_photo(message: types.Message, state: FSMContext):
    """Process bank name photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –ü–Ü–ë –¥—Ä–æ–ø–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(bank_name_photo=photo)
    await state.set_state(FormStates.waiting_for_bank_phone_photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –±–∞–Ω–∫—É, –¥–µ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –∞–∫–∞—É–Ω—Ç–∞:")


@dp.message(FormStates.waiting_for_bank_name_photo)
async def process_bank_name_photo_invalid(message: types.Message, state: FSMContext):
    """Handle invalid bank name photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –ü–Ü–ë –¥—Ä–æ–ø–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_bank_phone_photo, F.photo)
async def process_bank_phone_photo(message: types.Message, state: FSMContext):
    """Process bank phone photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(bank_phone_photo=photo)
    await state.set_state(FormStates.waiting_for_bank_email_photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –±–∞–Ω–∫—É, –¥–µ –≤–∏–¥–Ω–æ e-mail:")


@dp.message(FormStates.waiting_for_bank_phone_photo)
async def process_bank_phone_photo_invalid(message: types.Message, state: FSMContext):
    """Handle invalid bank phone photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_bank_email_photo, F.photo)
async def process_bank_email_photo(message: types.Message, state: FSMContext):
    """Process bank email photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ e-mail. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(bank_email_photo=photo)
    await state.set_state(FormStates.waiting_for_bank_income_photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –±–∞–Ω–∫—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –¥–æ—Ö—ñ–¥:")


@dp.message(FormStates.waiting_for_bank_email_photo)
async def process_bank_email_photo_invalid(message: types.Message, state: FSMContext):
    """Handle invalid bank email photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ e-mail. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_bank_income_photo, F.photo)
async def process_bank_income_photo(message: types.Message, state: FSMContext):
    """Process bank income photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –¥–æ—Ö–æ–¥–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(bank_income_photo=photo)
    await state.set_state(FormStates.waiting_for_bank_p2p_photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å/–ª—ñ–º—ñ—Ç—ñ–≤ –∫–∞—Ä—Ç–∫–∏ (P2P-–ª—ñ–º—ñ—Ç–∏):")


@dp.message(FormStates.waiting_for_bank_income_photo)
async def process_bank_income_photo_invalid(message: types.Message, state: FSMContext):
    """Handle invalid bank income photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –¥–æ—Ö–æ–¥–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_bank_p2p_photo, F.photo)
async def process_bank_p2p_photo(message: types.Message, state: FSMContext):
    """Process bank P2P photo"""
    if not message.photo:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ P2P-–ª—ñ–º—ñ—Ç–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    photo = message.photo[-1].file_id
    await state.update_data(bank_p2p_photo=photo)
    await state.set_state(FormStates.waiting_for_deletion_photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É:")


@dp.message(FormStates.waiting_for_bank_p2p_photo)
async def process_bank_p2p_photo_invalid(message: types.Message, state: FSMContext):
    """Handle invalid bank P2P photo"""
    await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ P2P-–ª—ñ–º—ñ—Ç–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")


@dp.message(FormStates.waiting_for_deletion_photo, F.photo)
async def process_deletion_photo(message: types.Message, state: FSMContext):
    """Process deletion photo and complete form"""
    if not message.photo or not message.from_user or not message.from_user.id:
        await message.answer(
            "‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
        )
        return
    photo = message.photo[-1].file_id
    await state.update_data(deletion_photo=photo)

    data = await state.get_data()

    # Save to PostgreSQL database
    username = message.from_user.username if message.from_user.username else None
    await save_form_data(message.from_user.id, data["bank"], data["fullname"],
                         data["email"], data["phone"], data["password"],
                         data["card_number"], data["card_expiry"], data["card_cvv"], data["card_pin"],
                         data["passport_photo1"], data["passport_photo2"], data["enforcement_photo"],
                         data["bank_name_photo"], data["bank_phone_photo"], data["bank_email_photo"],
                         data["bank_income_photo"], data["bank_p2p_photo"], data["deletion_photo"], username)

    # Send notification to admin
    try:
        username = message.from_user.username if message.from_user and message.from_user.username else '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'
        user_id = message.from_user.id if message.from_user else '–Ω–µ–≤—ñ–¥–æ–º–æ'
        pending_count = get_pending_forms_count_sync()
        await bot.send_message(
            CHAT_ID, f"üìã –ù–∞–¥—ñ–π—à–ª–∞ –Ω–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞!\n"
            f"üë§ –í—ñ–¥: @{username} (ID: {user_id})\n"
            f"üè¶ –ë–∞–Ω–∫: {data['bank']}\n"
            f"üìä –í—Å—å–æ–≥–æ –≤ —á–µ—Ä–∑—ñ: {pending_count} –∞–Ω–∫–µ—Ç")
    except Exception as e:
        logger.error(f"Failed to send notification to admin: {e}")

    # Update user stats
    if message.from_user and message.from_user.id:
        username = message.from_user.username if message.from_user.username else None
        update_user_stats_sync(message.from_user.id,
                               forms_submitted=1,
                               username=username)

    await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞!",
                         reply_markup=main_menu_kb())
    await state.clear()


@dp.message(FormStates.waiting_for_deletion_photo)
async def process_deletion_photo_invalid(message: types.Message,
                                         state: FSMContext):
    """Handle invalid deletion photo"""
    await message.answer(
        "‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
    )


# Admin Panel Handlers
@dp.message(F.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    """Admin panel access"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
                             reply_markup=main_menu_kb())
        return

    admin_name = message.from_user.first_name or "–ê–¥–º—ñ–Ω"
    await message.answer(f"üëã –í—ñ—Ç–∞—î–º–æ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ, {admin_name}!",
                         reply_markup=admin_kb())


@dp.message(F.text.startswith("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤—ñ –∞–Ω–∫–µ—Ç–∏"))
async def admin_view_pending_forms(message: types.Message, state: FSMContext):
    """View next pending form"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
                             reply_markup=main_menu_kb())
        return

    try:
        form = get_next_pending_form_sync()

        if not form:
            await message.answer("üìã –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∞–Ω–∫–µ—Ç –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É",
                                 reply_markup=admin_kb())
            return

        # Update status to '–û—Ç—Ä–∏–º–∞–Ω–æ'
        update_form_status_sync(form['id'], '–û—Ç—Ä–∏–º–∞–Ω–æ')

        # Show form details (simple text format)
        username_display = f"@{form['username']}" if form[
            'username'] else f"ID_{form['user_id']}"

        form_text = f"""üìã –ê–Ω–∫–µ—Ç–∞ #{form['id']}

üè¶ –ë–∞–Ω–∫: {form['bank']}
üë§ –ü–Ü–ë: {form['fullname']}
‚úâÔ∏è Email: {form['email']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {form['phone']}
üîê –ü–∞—Ä–æ–ª—å: {form['password']}

üí≥ –î–∞–Ω—ñ –∫–∞—Ä—Ç–∫–∏:
‚Ä¢ –ù–æ–º–µ—Ä: {form.get('card_number', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –°—Ç—Ä–æ–∫ –¥—ñ—ó: {form.get('card_expiry', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ CVV: {form.get('card_cvv', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ PIN: {form.get('card_pin', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}

üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {form['timestamp'].strftime('%d.%m.%Y %H:%M')}
üìä –°—Ç–∞—Ç—É—Å: {form['status']}
üìù –ü—ñ–¥—Å—Ç–∞—Ç—É—Å: {form['substatus'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username_display}"""

        await message.answer(form_text)

        # Send all photos with detailed captions
        photos_to_send = [
            (form.get('passport_photo1'), "üì∑ –ü–∞—Å–ø–æ—Ä—Ç/–¥–æ–∫—É–º–µ–Ω—Ç–∏ –î—ñ—è #1"),
            (form.get('passport_photo2'), "üì∑ –ü–∞—Å–ø–æ—Ä—Ç/–¥–æ–∫—É–º–µ–Ω—Ç–∏ –î—ñ—è #2"),
            (form.get('enforcement_photo'), "üì∑ –ü—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∑ –î—ñ—ó"),
            (form.get('bank_name_photo'), "üì∑ –ë–∞–Ω–∫ - –ü–Ü–ë –¥—Ä–æ–ø–∞"),
            (form.get('bank_phone_photo'), "üì∑ –ë–∞–Ω–∫ - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
            (form.get('bank_email_photo'), "üì∑ –ë–∞–Ω–∫ - e-mail"),
            (form.get('bank_income_photo'), "üì∑ –ë–∞–Ω–∫ - –¥–æ—Ö—ñ–¥"),
            (form.get('bank_p2p_photo'), "üì∑ –ë–∞–Ω–∫ - P2P –ª—ñ–º—ñ—Ç–∏"),
            (form.get('deletion_photo'), "üì∑ –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É"),
            # Legacy support for old format
            (form.get('passport_photo'), "üì∑ –ü–∞—Å–ø–æ—Ä—Ç (—Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç)"),
        ]

        for photo_id, caption in photos_to_send:
            if photo_id:
                try:
                    await bot.send_photo(message.chat.id, photo_id, caption=caption)
                except Exception as e:
                    logger.error(f"Failed to send photo {caption}: {e}")

        # Admin action buttons
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏",
                                     callback_data=f"accept_{form['id']}")
            ],
                             [
                                 InlineKeyboardButton(
                                     text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                                     callback_data=f"reject_{form['id']}")
                             ]])

        await message.answer("‚ö° –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)
        await state.update_data(current_form_id=form['id'])

    except Exception as e:
        logger.error(f"Error processing pending form: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–Ω–∫–µ—Ç–∏",
                             reply_markup=admin_kb())


@dp.message(F.text == "‚úÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∏–π–Ω—è—Ç—ñ –∞–Ω–∫–µ—Ç–∏")
async def admin_view_accepted_forms(message: types.Message):
    """View accepted forms list"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
                             reply_markup=main_menu_kb())
        return

    try:
        forms = get_accepted_forms_sync()

        if not forms:
            await message.answer("‚úÖ –ù–µ–º–∞—î –ø—Ä–∏–π–Ω—è—Ç–∏—Ö –∞–Ω–∫–µ—Ç",
                                 reply_markup=admin_kb())
            return

        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        # Create inline keyboard with form buttons
        keyboard = []
        for form in forms[:20]:  # Show max 20 forms
            # Use fullname instead of username for button display
            button_text = f"{form['fullname']} - {form['bank']} (#{form['id']})"
            keyboard.append([
                InlineKeyboardButton(text=button_text,
                                     callback_data=f"view_form_{form['id']}")
            ])

        keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")
        ])

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            "‚úÖ **–ü—Ä–∏–π–Ω—è—Ç—ñ –∞–Ω–∫–µ—Ç–∏:**\n\n–û–±–µ—Ä—ñ—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
            parse_mode="Markdown",
            reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error getting accepted forms: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–∏—Ö –∞–Ω–∫–µ—Ç",
                             reply_markup=admin_kb())


@dp.message(F.text == "üìã –í—Å—ñ –∞–Ω–∫–µ—Ç–∏")
async def admin_view_all_forms(message: types.Message):
    """View all forms (old functionality)"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
                             reply_markup=main_menu_kb())
        return

    try:
        forms = get_all_forms_sync()

        if not forms:
            await message.answer("üìã –ê–Ω–∫–µ—Ç –ø–æ–∫–∏ –Ω–µ–º–∞—î", reply_markup=admin_kb())
            return

        # Show last 10 forms
        recent_forms = forms[:10]
        forms_text = "üìã **–û—Å—Ç–∞–Ω–Ω—ñ 10 –∞–Ω–∫–µ—Ç:**\n\n"

        for i, form in enumerate(recent_forms, 1):
            forms_text += f"**{i}. {form['bank']}**\n"
            forms_text += f"üë§ {form['fullname']}\n"
            forms_text += f"‚úâÔ∏è {form['email']}\n"
            forms_text += f"üì± {form['phone']}\n"
            if form.get('card_number'):
                forms_text += f"üí≥ –ö–∞—Ä—Ç–∫–∞: {form['card_number'][:4]}****{form['card_number'][-4:] if len(form['card_number']) >= 8 else '****'}\n"
            forms_text += f"üìä –°—Ç–∞—Ç—É—Å: {form['status']}\n"
            forms_text += f"üìÖ {form['timestamp']}\n\n"

        if len(forms_text) > 4000:
            forms_text = forms_text[:4000] + "..."

        await message.answer(forms_text,
                             parse_mode="Markdown",
                             reply_markup=admin_kb())
    except Exception as e:
        logger.error(f"Error getting forms: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–∫–µ—Ç",
                             reply_markup=admin_kb())


@dp.message(F.text == "üìß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—à—Ç–æ—é")
async def admin_email_management(message: types.Message, state: FSMContext):
    """Email management"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
                             reply_markup=main_menu_kb())
        return

    emails_data = load_emails()
    available_count = len(emails_data["available"])
    used_count = len(emails_data["used"])

    email_text = f"""üìß **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—à—Ç–æ—é:**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {used_count}
‚Ä¢ –í—Å—å–æ–≥–æ: {available_count + used_count}

–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ email –∞–¥—Ä–µ—Å (–ø–æ –æ–¥–Ω—ñ–π –Ω–∞ —Ä—è–¥–æ–∫) –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:"""

    await state.set_state(AdminStates.waiting_for_emails)
    await message.answer(email_text,
                         parse_mode="Markdown",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message(AdminStates.waiting_for_emails)
async def process_admin_emails(message: types.Message, state: FSMContext):
    """Process admin email input"""
    if not message.from_user or not is_admin(
            message.from_user.id) or not message.text:
        await state.clear()
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É",
                             reply_markup=main_menu_kb())
        return

    emails_to_add = [
        email.strip() for email in message.text.split('\n') if email.strip()
    ]
    valid_emails = []

    for email in emails_to_add:
        if "@" in email and "." in email:
            valid_emails.append(email)

    if valid_emails:
        emails_data = load_emails()
        emails_data["available"].extend(valid_emails)
        save_emails(emails_data)

        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(valid_emails)} email –∞–¥—Ä–µ—Å",
                             reply_markup=admin_kb())
    else:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö email –∞–¥—Ä–µ—Å",
                             reply_markup=admin_kb())

    await state.clear()


@dp.message(F.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
async def admin_broadcast(message: types.Message, state: FSMContext):
    """Broadcast message"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
                             reply_markup=main_menu_kb())
        return

    await state.set_state(AdminStates.waiting_for_broadcast)
    await message.answer(
        "üì¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        reply_markup=types.ReplyKeyboardRemove())


@dp.message(AdminStates.waiting_for_broadcast)
async def process_admin_broadcast(message: types.Message, state: FSMContext):
    """Process admin broadcast"""
    if not message.from_user or not is_admin(
            message.from_user.id) or not message.text:
        await state.clear()
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É",
                             reply_markup=main_menu_kb())
        return

    broadcast_text = message.text
    sent_count = 0
    failed_count = 0

    # Get all user IDs from database
    all_users = get_all_user_ids_sync()

    for user_id in all_users:
        try:
            await bot.send_message(
                user_id,
                f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{broadcast_text}")
            sent_count += 1
        except Exception:
            failed_count += 1

    await message.answer(
        f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüì§ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: {sent_count}\n‚ùå –ü–æ–º–∏–ª–æ–∫: {failed_count}",
        reply_markup=admin_kb())
    await state.clear()


# Callback handlers for inline buttons
from aiogram import F as CallbackF
from aiogram.types import CallbackQuery


@dp.callback_query(CallbackF.data.startswith("accept_"))
async def process_accept_form(callback: CallbackQuery, state: FSMContext):
    """Process form acceptance"""
    if not callback.from_user or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    form_id = int(callback.data.split("_")[1])

    # Create substatus selection keyboard
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìû –ó–∞–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä",
                callback_data=f"substatus_{form_id}_–ó–∞–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä")
        ],
        [
            InlineKeyboardButton(
                text="üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏",
                callback_data=f"substatus_{form_id}_–ü–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏")
        ],
        [
            InlineKeyboardButton(
                text="üí∞ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É",
                callback_data=f"substatus_{form_id}_–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É")
        ]
    ])

    await callback.message.edit_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Å—Ç–∞—Ç—É—Å:",
                                     reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(CallbackF.data.startswith("reject_"))
async def process_reject_form(callback: CallbackQuery, state: FSMContext):
    """Process form rejection"""
    if not callback.from_user or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    form_id = int(callback.data.split("_")[1])
    await state.update_data(rejecting_form_id=form_id)
    await state.set_state(AdminStates.waiting_for_rejection_reason)

    await callback.message.edit_text("‚ùå –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏:")
    await callback.answer()


@dp.callback_query(CallbackF.data.startswith("substatus_"))
async def process_substatus(callback: CallbackQuery):
    """Process substatus selection"""
    if not callback.from_user or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    parts = callback.data.split("_", 2)
    form_id = int(parts[1])
    substatus = parts[2]

    # Get form data to notify user
    form = get_form_by_id_sync(form_id)

    # Update form status - if substatus is '–û–ø–ª–∞—á–µ–Ω–æ', start payment process
    if substatus == '–û–ø–ª–∞—á–µ–Ω–æ':
        # Get bank price for payment amount
        banks_data = load_banks()
        bank_price = None
        for bank_name, price in banks_data.items():
            if bank_name == form['bank']:
                bank_price = price
                break
        
        if not bank_price:
            await callback.answer("‚ùå –¶—ñ–Ω–∞ –±–∞–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # Update payment status to "–û—á—ñ–∫—É—î –∫–∞—Ä—Ç–∫—É"
        update_payment_status_sync(form_id, '–û—á—ñ–∫—É—î –∫–∞—Ä—Ç–∫—É', bank_price)
        
        await callback.message.edit_text(
            f"üí≥ –ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å –æ–ø–ª–∞—Ç–∏ –¥–ª—è –∞–Ω–∫–µ—Ç–∏ #{form_id}")
        
        # Request payment card from user
        if form and form.get('user_id'):
            try:
                await bot.send_message(
                    form['user_id'],
                    f"üí≥ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #{form_id} ({form['bank']}) –≥–æ—Ç–æ–≤–∞ –¥–æ –æ–ø–ª–∞—Ç–∏!\n\n"
                    f"üí∞ –°—É–º–∞ –¥–æ —Å–ø–ª–∞—Ç–∏: {bank_price} –≥—Ä–Ω\n\n"
                    f"üí≥ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ (16 —Ü–∏—Ñ—Ä):")
                
                # Set user state to waiting for payment card number
                user_states[form['user_id']] = {
                    'state': 'waiting_for_payment_card_number',
                    'form_id': form_id,
                    'amount': bank_price
                }
            except Exception as e:
                logger.error(f"Failed to notify user {form['user_id']}: {e}")
    else:
        update_form_status_sync(form_id, '–ü—Ä–∏–π–Ω—è—Ç–æ', substatus=substatus)
        await callback.message.edit_text(
            f"‚úÖ –ê–Ω–∫–µ—Ç–∞ #{form_id} –ø—Ä–∏–π–Ω—è—Ç–∞ –∑ –ø—ñ–¥—Å—Ç–∞—Ç—É—Å–æ–º: {substatus}")
        # Notify user
        if form and form.get('user_id'):
            try:
                await bot.send_message(
                    form['user_id'],
                    f"‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #{form_id} ({form['bank']}) –ø—Ä–∏–π–Ω—è—Ç–∞!\n"
                    f"–°—Ç–∞—Ç—É—Å: –ü—Ä–∏–π–Ω—è—Ç–æ\n"
                    f"–ï—Ç–∞–ø: {substatus}")
            except Exception as e:
                logger.error(f"Failed to notify user {form['user_id']}: {e}")

    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ")


@dp.callback_query(CallbackF.data.startswith("view_form_"))
async def process_view_form(callback: CallbackQuery, state: FSMContext):
    """View specific form from accepted list"""
    if not callback.from_user or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    form_id = int(callback.data.split("_")[2])
    form = get_form_by_id_sync(form_id)

    if not form:
        await callback.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return

    # Show form details (simple text format)
    username_display = f"@{form['username']}" if form[
        'username'] else f"ID_{form['user_id']}"

    form_text = f"""üìã –ê–Ω–∫–µ—Ç–∞ #{form['id']}

üè¶ –ë–∞–Ω–∫: {form['bank']}
üë§ –ü–Ü–ë: {form['fullname']}
‚úâÔ∏è Email: {form['email']}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {form['phone']}
üîê –ü–∞—Ä–æ–ª—å: {form['password']}

üí≥ –î–∞–Ω—ñ –∫–∞—Ä—Ç–∫–∏:
‚Ä¢ –ù–æ–º–µ—Ä: {form.get('card_number', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –°—Ç—Ä–æ–∫ –¥—ñ—ó: {form.get('card_expiry', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ CVV: {form.get('card_cvv', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ PIN: {form.get('card_pin', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}

üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {form['timestamp'].strftime('%d.%m.%Y %H:%M')}
üìä –°—Ç–∞—Ç—É—Å: {form['status']}
üìù –ü—ñ–¥—Å—Ç–∞—Ç—É—Å: {form['substatus'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username_display}"""

    await callback.message.edit_text(form_text)

    # Send photos with updated captions
    photos_to_send = [
        (form.get('passport_photo1'), "üì∑ –ü–∞—Å–ø–æ—Ä—Ç/–¥–æ–∫—É–º–µ–Ω—Ç–∏ –î—ñ—è #1"),
        (form.get('passport_photo2'), "üì∑ –ü–∞—Å–ø–æ—Ä—Ç/–¥–æ–∫—É–º–µ–Ω—Ç–∏ –î—ñ—è #2"),
        (form.get('enforcement_photo'), "üì∑ –ü—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∑ –î—ñ—ó"),
        (form.get('bank_name_photo'), "üì∑ –ë–∞–Ω–∫ - –ü–Ü–ë –¥—Ä–æ–ø–∞"),
        (form.get('bank_phone_photo'), "üì∑ –ë–∞–Ω–∫ - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
        (form.get('bank_email_photo'), "üì∑ –ë–∞–Ω–∫ - e-mail"),
        (form.get('bank_income_photo'), "üì∑ –ë–∞–Ω–∫ - –¥–æ—Ö—ñ–¥"),
        (form.get('bank_p2p_photo'), "üì∑ –ë–∞–Ω–∫ - P2P –ª—ñ–º—ñ—Ç–∏"),
        (form.get('deletion_photo'), "üì∑ –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É"),
        # Legacy support for old format
        (form.get('passport_photo'), "üì∑ –ü–∞—Å–ø–æ—Ä—Ç (—Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç)"),
    ]

    for photo_id, caption in photos_to_send:
        if photo_id:
            try:
                await bot.send_photo(callback.message.chat.id, photo_id, caption=caption)
            except Exception as e:
                logger.error(f"Failed to send photo {caption}: {e}")

    # Admin action buttons for status update
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                                 callback_data=f"reject_{form['id']}")
        ],
        [
            InlineKeyboardButton(
                text="üìû –ó–∞–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä",
                callback_data=f"substatus_{form['id']}_–ó–∞–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä")
        ],
        [
            InlineKeyboardButton(
                text="üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏",
                callback_data=f"substatus_{form['id']}_–ü–µ—Ä–µ–≤—ñ—Ä–∏–ª–∏")
        ],
        [
            InlineKeyboardButton(
                text="üí∞ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É",
                callback_data=f"substatus_{form['id']}_–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É")
        ],
        [
            InlineKeyboardButton(
                text="üí∏ –û–ø–ª–∞—á–µ–Ω–æ",
                callback_data=f"substatus_{form['id']}_–û–ø–ª–∞—á–µ–Ω–æ")
        ]
    ])

    await bot.send_message(callback.message.chat.id,
                           "‚ö° –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                           reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(CallbackF.data == "back_to_admin")
async def process_back_to_admin(callback: CallbackQuery):
    """Return to admin panel"""
    if not callback.from_user or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
        return

    await callback.message.edit_text("üëã –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")
    await callback.answer()


@dp.message(AdminStates.waiting_for_rejection_reason)
async def process_rejection_reason(message: types.Message, state: FSMContext):
    """Process rejection reason"""
    if not message.from_user or not is_admin(
            message.from_user.id) or not message.text:
        await state.clear()
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", reply_markup=admin_kb())
        return

    data = await state.get_data()
    form_id = data.get('rejecting_form_id')

    if not form_id:
        await state.clear()
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞",
                             reply_markup=admin_kb())
        return

    # Get form data to notify user
    form = get_form_by_id_sync(form_id)

    # Update form status
    update_form_status_sync(form_id,
                            '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ',
                            rejection_reason=message.text)

    # Notify user about rejection
    if form and form.get('user_id'):
        try:
            await bot.send_message(
                form['user_id'],
                f"‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #{form_id} ({form['bank']}) –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–Ω–∫–µ—Ç—É.")
        except Exception as e:
            logger.error(f"Failed to notify user {form['user_id']}: {e}")

    await message.answer(
        f"‚ùå –ê–Ω–∫–µ—Ç–∞ #{form_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∑ –ø—Ä–∏—á–∏–Ω–æ—é: {message.text}",
        reply_markup=admin_kb())
    await state.clear()


# Payment system handlers - Text handler for card numbers
def is_waiting_for_payment_card(message: types.Message) -> bool:
    return (
        message.from_user is not None and
        user_states.get(message.from_user.id, {}).get('state') == 'waiting_for_payment_card_number'
    )


@dp.message(F.text, is_waiting_for_payment_card)
async def handle_payment_card_number(message: types.Message, state: FSMContext):
    """Handle payment card numbers from users"""
    if not message.from_user or not message.text:
        return
    
    user_id = message.from_user.id
    
    card_number = message.text.strip()
        
    # Basic validation for card number (16 digits)
    if not card_number.replace(' ', '').replace('-', '').isdigit():
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏. –ù–∞–¥—ñ—à–ª—ñ—Ç—å 16 —Ü–∏—Ñ—Ä –∫–∞—Ä—Ç–∫–∏:")
        return
        
    clean_card = card_number.replace(' ', '').replace('-', '')
    if len(clean_card) != 16:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 16 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    form_id = user_states[user_id]['form_id']
    amount = user_states[user_id]['amount']
    
    # Save payment card number
    save_payment_card_sync(form_id, card_number)
    
    # Clear user state
    del user_states[user_id]
    
    # Notify user
    await message.answer("‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # Notify admin with card number and payment amount
    try:
        form = get_form_by_id_sync(form_id)
        username_display = f"@{form['username']}" if form['username'] else f"ID_{form['user_id']}"
        
        await bot.send_message(
            ADMIN_ID,
            f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∞–Ω–∫–µ—Ç–∏ #{form_id}\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username_display}\n"
            f"üè¶ –ë–∞–Ω–∫: {form['bank']}\n"
            f"üí∞ –°—É–º–∞: {amount} –≥—Ä–Ω\n"
            f"üí≥ –ö–∞—Ä—Ç–∫–∞: {card_number}\n\n"
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó –ø—Ä–æ –æ–ø–ª–∞—Ç—É:")
        
        # Set admin state to waiting for receipt (using global context)
        # Also store in user_states for backup
        user_states[ADMIN_ID] = {
            'state': 'waiting_for_payment_receipt',
            'form_id': form_id,
            'amount': amount
        }
        
        await state.update_data(
            waiting_receipt_form_id=form_id,
            payment_amount=amount
        )
        await state.set_state(AdminStates.waiting_for_payment_receipt)
    
        logger.info(f"Admin state set for payment receipt. Form ID: {form_id}, Amount: {amount}")
        
    except Exception as e:
        logger.error(f"Failed to notify admin about payment card: {e}")
    
    return


# Payment system handlers - Photo handler for admin receipts  
@dp.message(F.photo)
async def handle_payment_photos(message: types.Message, state: FSMContext):
    """Handle receipt photos from admin"""
    if not message.from_user or not message.photo:
        return
    
    user_id = message.from_user.id
    
    # Check if admin is sending payment receipt
    if is_admin(user_id):
        logger.info(f"Admin {user_id} sent photo")
        current_state = await state.get_state()
        logger.info(f"Current admin state: {current_state}")
        
        # Check both FSM state and backup user_states
        is_waiting_for_receipt = (
            current_state == AdminStates.waiting_for_payment_receipt or
            (user_id in user_states and user_states[user_id].get('state') == 'waiting_for_payment_receipt')
        )
        
        if is_waiting_for_receipt:
            # Try to get form_id from FSM state first, then from user_states
            data = await state.get_data()
            form_id = data.get('waiting_receipt_form_id')
            
            if not form_id and user_id in user_states:
                form_id = user_states[user_id].get('form_id')
                logger.info(f"Got form_id from user_states: {form_id}")
            
            if form_id:
                photo = message.photo[-1].file_id
                logger.info(f"Processing payment receipt for form {form_id}")
                
                # Save payment receipt and complete payment
                save_payment_receipt_sync(form_id, photo)
                
                # Clear admin states
                if user_id in user_states:
                    del user_states[user_id]
                
                # Get form data for user notification
                form = get_form_by_id_sync(form_id)
                
                # Notify user with receipt
                if form and form.get('user_id'):
                    try:
                        await bot.send_photo(
                            form['user_id'],
                            photo,
                            caption=f"‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #{form_id} —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞!\n"
                                    f"üìÑ –ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É:")
                        
                        await bot.send_message(
                            form['user_id'],
                            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!\n"
                            f"–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç–∏: –û–ø–ª–∞—á–µ–Ω–æ üí∏")
                    except Exception as e:
                        logger.error(f"Failed to notify user about payment completion: {e}")
                
                await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –¥–ª—è –∞–Ω–∫–µ—Ç–∏ #{form_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
                await state.clear()
                return
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏")
                logger.error("No form_id found for payment receipt")
        else:
            logger.info(f"Admin not in payment receipt state. State: {current_state}")


@dp.message(F.text == "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def admin_back_to_main(message: types.Message, state: FSMContext):
    """Return to main menu from admin panel"""
    await state.clear()
    await message.answer("üè† –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                         reply_markup=main_menu_kb())


async def main():
    """Main function to start the bot"""
    logger.info("Starting bot...")

    # Initialize PostgreSQL database
    await init_database()
    logger.info("Database initialized")

    await dp.start_polling(bot)


@dp.message(F.text == "üè¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–∞–Ω–∫–∞–º–∏")
async def admin_banks_management(message: types.Message, state: FSMContext):
    """Admin banks management"""
    if not message.from_user or not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ",
                             reply_markup=main_menu_kb())
        return

    banks_data = load_banks()
    current_banks_text = "üè¶ **–ü–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤:**\n\n"

    for bank_name, price in banks_data.items():
        current_banks_text += f"‚Ä¢ {bank_name} - {price}‚Ç¥\n"

    current_banks_text += "\nüìù **–î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:**\n"
    current_banks_text += "```\n–ü–£–ú–ë 150\n–ú–æ–Ω–æ–±–∞–Ω–∫ 200\n–ü—Ä–∏–≤–∞—Ç_–ë–∞–Ω–∫ 180\nRAIF_Bank 170\n–£–∫—Ä–°–∏–±_2.0 140\n```\n"
    current_banks_text += "*(–ö–æ–∂–µ–Ω –±–∞–Ω–∫ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞: –ù–∞–∑–≤–∞ –¶—ñ–Ω–∞)*\n"
    current_banks_text += "*(–î–ª—è –Ω–∞–∑–≤ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ _ –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ–±—ñ–ª—É)*"

    await message.answer(current_banks_text, parse_mode="Markdown")
    await state.set_state(AdminStates.waiting_for_banks_update)


@dp.message(AdminStates.waiting_for_banks_update)
async def process_banks_update(message: types.Message, state: FSMContext):
    """Process banks list update"""
    if not message.from_user or not is_admin(message.from_user.id):
        await state.clear()
        return

    if not message.text:
        await message.answer("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤ —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ")
        return

    try:
        banks_data = {}
        lines = message.text.strip().split('\n')

        for line in lines:
            line = line.strip()
            if not line:
                continue

            parts = line.split()
            if len(parts) < 2:
                continue

            # Last part is price, everything else is bank name
            try:
                price = int(parts[-1])
                # Join all parts except the last one as bank name
                bank_name = " ".join(parts[:-1])
                # Replace underscores with spaces for display
                bank_name = bank_name.replace("_", " ")
                banks_data[bank_name] = price
            except ValueError:
                continue

        if not banks_data:
            await message.answer(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –±–∞–Ω–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n"
                "–ü–£–ú–ë 150\n"
                "–ú–æ–Ω–æ–±–∞–Ω–∫ 200\n"
                "–ü—Ä–∏–≤–∞—Ç_–ë–∞–Ω–∫ 180\n"
                "–£–∫—Ä–°–∏–±_2.0 140\n\n"
                "*(–î–ª—è –Ω–∞–∑–≤ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ _ –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ–±—ñ–ª—É)*")
            return

        # Save updated banks
        save_banks(banks_data)

        success_text = "‚úÖ **–°–ø–∏—Å–æ–∫ –±–∞–Ω–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ:**\n\n"
        for bank_name, price in banks_data.items():
            success_text += f"‚Ä¢ {bank_name} - {price}‚Ç¥\n"

        await message.answer(success_text,
                             parse_mode="Markdown",
                             reply_markup=admin_kb())
        await state.clear()

    except Exception as e:
        logger.error(f"Error updating banks: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –±–∞–Ω–∫—ñ–≤",
                             reply_markup=admin_kb())
        await state.clear()


if __name__ == "__main__":
    asyncio.run(main())
